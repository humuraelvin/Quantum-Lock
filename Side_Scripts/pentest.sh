#!/bin/bash

###########################################
# Penetration Testing Project: Network Scanner
# 
# This script performs comprehensive network device mapping,
# port scanning, service identification, and vulnerability scanning.
# The script stores all data in a newly created directory and
# presents a summary of findings to the user.
#
# Author: Penetration Testing Student
# Class Code: PT101
# Lecturer: Cybersecurity Instructor
###########################################

# Color codes for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Check if script is running as root
if [ "$EUID" -ne 0 ]; then
  echo -e "${RED}Error: This script must be run as root${NC}"
  exit 1
fi

# Check for required tools
check_requirements() {
  local missing_tools=()
  
  for tool in nmap masscan searchsploit hydra medusa; do
    if ! command -v "$tool" &> /dev/null; then
      missing_tools+=("$tool")
    fi
  done
  
  if [ ${#missing_tools[@]} -ne 0 ]; then
    echo -e "${RED}Error: The following required tools are missing:${NC}"
    for tool in "${missing_tools[@]}"; do
      echo -e "${YELLOW}- $tool${NC}"
    done
    echo -e "${CYAN}Please install them using: apt-get install ${missing_tools[*]}${NC}"
    exit 1
  fi
}

# Display banner
display_banner() {
  clear
  echo -e "${BLUE}===============================================================${NC}"
  echo -e "${CYAN}             PENETRATION TESTING - NETWORK SCANNER           ${NC}"
  echo -e "${BLUE}===============================================================${NC}"
  echo -e "${YELLOW}This tool performs comprehensive network reconnaissance and${NC}"
  echo -e "${YELLOW}vulnerability scanning. For authorized use only.${NC}"
  echo -e "${BLUE}===============================================================${NC}"
  echo ""
}

# Create output directory
create_output_dir() {
  timestamp=$(date +%Y%m%d_%H%M%S)
  output_dir="network_scan_$timestamp"
  
  mkdir -p "$output_dir"
  mkdir -p "$output_dir/nmap"
  mkdir -p "$output_dir/masscan"
  mkdir -p "$output_dir/vulnerabilities"
  mkdir -p "$output_dir/services"
  
  echo -e "${GREEN}Created output directory: $output_dir${NC}"
  return 0
}

# Function to validate IP range
validate_ip_range() {
  local ip_range="$1"
  
  # Basic validation using regex pattern for CIDR notation (e.g., 192.168.1.0/24)
  if [[ ! "$ip_range" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/[0-9]{1,2}$ ]]; then
    # Check if it's a single IP address
    if [[ ! "$ip_range" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
      return 1
    fi
  fi
  
  return 0
}

# Function to perform initial network discovery using masscan
discover_network() {
  local ip_range="$1"
  
  echo -e "${CYAN}Starting network discovery for $ip_range...${NC}"
  echo -e "${YELLOW}Running initial masscan to discover hosts...${NC}"
  
  # Run masscan for quick host discovery
  masscan "$ip_range" -p 1-1000 --rate=1000 -oG "$output_dir/masscan/masscan_results.gnmap" 2>/dev/null
  
  # Extract discovered hosts
  discovered_hosts=$(grep "Host:" "$output_dir/masscan/masscan_results.gnmap" | cut -d " " -f 2 | sort -u)
  
  # Save discovered hosts to file
  echo "$discovered_hosts" > "$output_dir/discovered_hosts.txt"
  
  host_count=$(wc -l < "$output_dir/discovered_hosts.txt")
  
  echo -e "${GREEN}Network discovery completed. Found $host_count hosts.${NC}"
  
  return 0
}

# Function to scan ports and services using nmap
scan_ports_and_services() {
  echo -e "${CYAN}Starting port and service scanning...${NC}"
  
  if [ ! -s "$output_dir/discovered_hosts.txt" ]; then
    echo -e "${RED}No hosts discovered. Skipping port scanning.${NC}"
    return 1
  fi
  
  # Create a list of live hosts for nmap
  live_hosts_file="$output_dir/live_hosts.txt"
  cat "$output_dir/discovered_hosts.txt" | tr '\n' ' ' > "$live_hosts_file"
  
  echo -e "${YELLOW}Scanning ports and services on discovered hosts...${NC}"
  
  # Run comprehensive nmap scan
  nmap -sS -sV -O -A -T4 -iL "$output_dir/discovered_hosts.txt" -oA "$output_dir/nmap/detailed_scan" > /dev/null 2>&1
  
  # Extract open ports and services
  grep "open" "$output_dir/nmap/detailed_scan.nmap" | sort -u > "$output_dir/services/open_ports.txt"
  
  # Count discovered services
  service_count=$(grep "open" "$output_dir/nmap/detailed_scan.nmap" | wc -l)
  
  echo -e "${GREEN}Port and service scanning completed. Found $service_count open services.${NC}"
  
  return 0
}

# Function to detect vulnerabilities using nmap scripts
detect_vulnerabilities() {
  echo -e "${CYAN}Starting vulnerability scanning...${NC}"
  
  if [ ! -s "$output_dir/discovered_hosts.txt" ]; then
    echo -e "${RED}No hosts discovered. Skipping vulnerability scanning.${NC}"
    return 1
  fi
  
  echo -e "${YELLOW}Running nmap vulnerability scripts...${NC}"
  
  # Run nmap with vulnerability scripts
  nmap -sS --script vuln -iL "$output_dir/discovered_hosts.txt" -oA "$output_dir/vulnerabilities/vuln_scan" > /dev/null 2>&1
  
  # Extract identified vulnerabilities
  grep -i "VULNERABLE" "$output_dir/vulnerabilities/vuln_scan.nmap" > "$output_dir/vulnerabilities/identified_vulns.txt"
  
  # Count discovered vulnerabilities
  vuln_count=$(grep -i "VULNERABLE" "$output_dir/vulnerabilities/vuln_scan.nmap" | wc -l)
  
  echo -e "${GREEN}Vulnerability scanning completed. Found $vuln_count potential vulnerabilities.${NC}"
  
  # Use searchsploit to find exploits for discovered services
  echo -e "${YELLOW}Searching for exploits...${NC}"
  
  services=$(grep "open" "$output_dir/nmap/detailed_scan.nmap" | grep -oP '\s\w+\s' | sort -u | tr -d ' ')
  for service in $services; do
    searchsploit "$service" > "$output_dir/vulnerabilities/exploits_$service.txt" 2>/dev/null
  done
  
  return 0
}

# Function to check for weak credentials
check_weak_credentials() {
  echo -e "${CYAN}Starting weak credential checks...${NC}"
  
  # Check for common services that might have weak credentials
  ssh_hosts=$(grep "22/tcp.*ssh" "$output_dir/nmap/detailed_scan.nmap" | cut -d " " -f 2)
  ftp_hosts=$(grep "21/tcp.*ftp" "$output_dir/nmap/detailed_scan.nmap" | cut -d " " -f 2)
  
  echo -e "${YELLOW}Creating wordlists for credential testing...${NC}"
  
  # Create small wordlists for demonstration purposes
  echo -e "admin\nroot\nuser\nadministrator" > "$output_dir/users.txt"
  echo -e "password\nadmin\n123456\nqwerty\npassword123" > "$output_dir/passwords.txt"
  
  # Simulated credential checking (not actually performing brute force)
  echo -e "${YELLOW}Simulating credential checks (no actual brute force performed)...${NC}"
  
  # Log simulated checks
  echo "Hydra and Medusa would be used to test for weak credentials on the following services:" > "$output_dir/vulnerabilities/weak_credentials.txt"
  
  if [ -n "$ssh_hosts" ]; then
    echo "SSH hosts: $ssh_hosts" >> "$output_dir/vulnerabilities/weak_credentials.txt"
    echo "Example command: hydra -L users.txt -P passwords.txt ssh://<target>" >> "$output_dir/vulnerabilities/weak_credentials.txt"
  fi
  
  if [ -n "$ftp_hosts" ]; then
    echo "FTP hosts: $ftp_hosts" >> "$output_dir/vulnerabilities/weak_credentials.txt"
    echo "Example command: medusa -U users.txt -P passwords.txt -M ftp -h <target>" >> "$output_dir/vulnerabilities/weak_credentials.txt"
  fi
  
  echo -e "${GREEN}Weak credential check simulation completed.${NC}"
  echo -e "${YELLOW}Note: No actual brute force was performed. See $output_dir/vulnerabilities/weak_credentials.txt for details.${NC}"
  
  return 0
}

# Function to generate a summary report
generate_summary() {
  echo -e "${CYAN}Generating summary report...${NC}"
  
  summary_file="$output_dir/scan_summary.txt"
  
  echo "==============================================" > "$summary_file"
  echo "      NETWORK SCAN SUMMARY" >> "$summary_file"
  echo "      $(date)" >> "$summary_file"
  echo "==============================================" >> "$summary_file"
  echo "" >> "$summary_file"
  
  # Host summary
  host_count=$(wc -l < "$output_dir/discovered_hosts.txt" 2>/dev/null || echo "0")
  echo "DISCOVERED HOSTS: $host_count" >> "$summary_file"
  if [ "$host_count" -gt 0 ]; then
    echo "--------------------------" >> "$summary_file"
    cat "$output_dir/discovered_hosts.txt" >> "$summary_file"
  fi
  echo "" >> "$summary_file"
  
  # Services summary
  service_count=$(grep "open" "$output_dir/nmap/detailed_scan.nmap" 2>/dev/null | wc -l || echo "0")
  echo "OPEN SERVICES: $service_count" >> "$summary_file"
  if [ "$service_count" -gt 0 ]; then
    echo "--------------------------" >> "$summary_file"
    grep "open" "$output_dir/nmap/detailed_scan.nmap" | head -10 >> "$summary_file"
    if [ "$service_count" -gt 10 ]; then
      echo "... and $(($service_count - 10)) more" >> "$summary_file"
    fi
  fi
  echo "" >> "$summary_file"
  
  # Vulnerability summary
  vuln_count=$(grep -i "VULNERABLE" "$output_dir/vulnerabilities/vuln_scan.nmap" 2>/dev/null | wc -l || echo "0")
  echo "POTENTIAL VULNERABILITIES: $vuln_count" >> "$summary_file"
  if [ "$vuln_count" -gt 0 ]; then
    echo "--------------------------" >> "$summary_file"
    grep -i "VULNERABLE" "$output_dir/vulnerabilities/vuln_scan.nmap" | head -10 >> "$summary_file"
    if [ "$vuln_count" -gt 10 ]; then
      echo "... and $(($vuln_count - 10)) more" >> "$summary_file"
    fi
  fi
  
  echo "" >> "$summary_file"
  echo "==============================================" >> "$summary_file"
  echo "Complete scan results available in: $output_dir" >> "$summary_file"
  echo "==============================================" >> "$summary_file"
  
  echo -e "${GREEN}Summary report generated: $summary_file${NC}"
  
  return 0
}

# Display summary to user
display_summary() {
  echo -e "${BLUE}===============================================================${NC}"
  echo -e "${CYAN}                       SCAN RESULTS                           ${NC}"
  echo -e "${BLUE}===============================================================${NC}"
  
  host_count=$(wc -l < "$output_dir/discovered_hosts.txt" 2>/dev/null || echo "0")
  service_count=$(grep "open" "$output_dir/nmap/detailed_scan.nmap" 2>/dev/null | wc -l || echo "0")
  vuln_count=$(grep -i "VULNERABLE" "$output_dir/vulnerabilities/vuln_scan.nmap" 2>/dev/null | wc -l || echo "0")
  
  echo -e "${GREEN}Scan completed successfully.${NC}"
  echo -e "${CYAN}Hosts discovered:${NC} ${YELLOW}$host_count${NC}"
  echo -e "${CYAN}Open services:${NC} ${YELLOW}$service_count${NC}"
  echo -e "${CYAN}Potential vulnerabilities:${NC} ${YELLOW}$vuln_count${NC}"
  echo ""
  echo -e "${CYAN}All scan results saved to:${NC} ${YELLOW}$output_dir${NC}"
  echo -e "${CYAN}Summary report:${NC} ${YELLOW}$output_dir/scan_summary.txt${NC}"
  echo ""
  echo -e "${RED}IMPORTANT: This scan was performed for authorized penetration testing purposes only.${NC}"
  echo -e "${RED}The information obtained should be handled securely and responsibly.${NC}"
  echo -e "${BLUE}===============================================================${NC}"
}

# Main function
main() {
  # Display banner
  display_banner
  
  # Check requirements
  check_requirements
  
  # Create output directory
  create_output_dir
  
  # Get target network range from user
  echo -e "${CYAN}Enter the target network range (e.g., 192.168.1.0/24):${NC}"
  read target_range
  
  # Validate IP range
  if ! validate_ip_range "$target_range"; then
    echo -e "${RED}Error: Invalid IP range format. Please use CIDR notation (e.g., 192.168.1.0/24) or a single IP.${NC}"
    exit 1
  fi
  
  # Confirm before proceeding
  echo -e "${RED}WARNING: You are about to perform a network scan on $target_range${NC}"
  echo -e "${RED}This should only be done on networks you have permission to scan.${NC}"
  echo -e "${CYAN}Do you want to continue? (y/n)${NC}"
  read confirmation
  
  if [[ ! "$confirmation" =~ ^[Yy]$ ]]; then
    echo -e "${YELLOW}Scan aborted.${NC}"
    exit 0
  fi
  
  # Start the scanning process
  discover_network "$target_range"
  scan_ports_and_services
  detect_vulnerabilities
  check_weak_credentials
  generate_summary
  display_summary
  
  echo -e "${GREEN}Scan completed successfully.${NC}"
}

# Execute main function
main
